Instalando o react: npx create-react-app primeiraaula //Ou cra

    cd primeiraaula
    npm start
    
O que é jsx: É como se fosse o html dentro do JavaScript

Componentes:

Criando componentes: Na pasta src, criarei um arquivo chamado Texto.js, que será nosso primeiro componente

    import './App.css' //Para estilizar o componente

    function Texto() {
        return( //Parênteses, não chave
            <p>Criamos nosso primeiro componente</p>
        )
    }

    export default Texto

Usando nosso componente no App.js:

    import Texto from './Texto'

    e podemos chamar nosso componente através das tags: <Texto></Texto>

Props: São propriedades

Componente com props:

    import React from 'react'

    export default function Article(props) {
        return(
            <div>
                <article>
                    <h1>{props.titulo}</h1> //entre chaves
                    <h4>{props.descricao}</h4>
                </article>
                <br />
            </div>
        )
    }

Usando props:

    import './App.css';
    import Article from './components/Article'

    function App() {
    return (
        <div className="App">
        <h1>Blog da DankiCode</h1>
        <h2>Ciência e tecnologia</h2>
        <hr />

        <Article titulo="Notícia 01" descricao="Descrição da notícia 01"></Article>
        <Article titulo="Notícia 02" descricao="Descrição da notícia 02"></Article>

        </div>
    );
    }

    export default App;

Para usar JavaScript no JSX, temos que usar {}

Variáveis no componente:

    import React from 'react'

    export default function Article(props) {
        let numero = 1256
        return(
            <div>
                <article>
                    <h1>{props.titulo}</h1>
                    <h4>{props.descricao}</h4>
                    <h5>Número de letras no artigo: {numero}</h5>
                </article>
                <br />
            </div>
        )
    }

componentes de classe:

    import './App.css';
    import React from 'react'

    class App extends React.Component {
    onclick() {
        alert('Isso é um alerta')
    }

    render() {
        return (
        <div className="App">
            <h1>Blog da DankiCode</h1>
            <h2>Ciência e tecnologia</h2>
            <hr />

            <button onClick={this.onclick}>Clique</button>
        </div>
        )
    }

    }

    export default App;

Hooks:

useState:

    import { useState } from 'react';
    import './App.css';
    import Article from './components/Article'

    function App() {

    const [nome, setNome] = useState('Valor inicial') //Serve para guardar o valor inicial - o nome só aceita leitura. Para mudar, usa-se o setNome

    function changeName() {
        setNome('Ciência e tecnologia')
    }

    return (
        <div className="App">
        <h1>Blog da DankiCode</h1>
        <h2>{nome}</h2>
        <button onClick={changeName}>Mudar o nome pelo setNome</button>
        <hr />

        <Article titulo="Notícia 01" descricao="Descrição da notícia 01"></Article>
        <Article titulo="Notícia 02" descricao="Descrição da notícia 02"></Article>
        </div>
    );
    }

    export default App;

Entendendo melhor o useState:

Contador usando useState:

    import './App.css';
    import React, { useState } from 'react'

    function App() {
    const [count, setCount] = useState(0)

    var vez
    count == 1? vez = 'vez' : vez = 'vezes'

    return (
        <div>
        <p>Você clicou {count} {vez} </p>
        <button onClick={() => {
            setCount(count + 1)
            }}>-Clique em Mim-</button>
        </div>
    )
    }

    export default App;

useState com array:

    import './App.css';
    import React, { useState } from 'react'

    function App() {
    const [nomes, setNomes] = useState(['Cainã ', 'Micael '])

    return (
        <div>
        <p>{nomes}</p>
        <button onClick={() => setNomes([...nomes, 'Silvestre '])}>Clique para adicionar um nome</button>
        </div>
        
    )
    }

    export default App;

Exemplo 2 de useState com array e percorrendo este array:

    import './App.css';
    import React, { useState } from 'react'

    function App() {
    const [numeros, setNumeros] = useState([1,2])

    const addNumeros =  () => {
        setNumeros([...numeros,  Math.floor(10* Math.random() + 1)]) //Gera um número aleatório
    }

    return (
        <div>
        <button onClick={addNumeros}>Clique</button>
        <ul>
            {numeros.map((numero, indice) => {
            return ( 
                <div>
                <li key={indice}>{numero}</li>
                <p>Próximo: </p>
                </div>
            )
            })}
        </ul>
        </div>
        
    )
    }

    export default App;

useEffect: Toda vez que ocorre uma nova renderização, este efeito roda. Pode ser da página ou de algum elemento

Quando qualquer estado for renderizado:

    import './App.css';
    import React, { useState, useEffect } from 'react'

    function App() {
    const [count, setCount] = useState(0)

    useEffect(() => {
        document.title = `Número de clicks: ${count}`
    }) //Toda vez que ocorre uma nova renderização

    return(
        <div>
        <h1>Olhe para o título da página</h1>
        <button onClick={() => setCount(count + 1)}>Clique aqui</button>
        </div>
    )
    }

    export default App;

Renderizando somente na primeira vez (Muito usado quando se usa firebase):

    import './App.css';
    import React, { useState, useEffect } from 'react'

    function App() {
    const [count, setCount] = useState(0)

    useEffect(() => {
        document.title = `Número de clicks: ${count}`
    }, []) //Só roda quando renderizar pela primeira vez

    return(
        <div>
        <h1>Olhe para o título da página</h1>
        <button onClick={() => setCount(count + 1)}>Clique aqui</button>
        </div>
    )
    }

    export default App;

useEffect monitorando se algum elemento é atualizado

    import { useState, useEffect } from 'react';
    import './App.css';

    function App() {

    const [nome, setNome] = useState('Valor inicial') //Serve para quardar o valor inicial - o nome só aceita leitura. Para mudar, usa-se o setNome

    useEffect(() => {  //Toda vez que o objeto é modificado, ele captura e renderiza
        console.log(nome)
    }, [nome])

    return (
        <div className="App">
        <header className="App-header">
            <h1>Nome</h1>
            <input onChange={e => setNome(e.target.value)}/>
        </header>
        </div>
    );
    }

    export default App;

Componente de relógio com hora atual:

    import './App.css';
    import React, { useState, useEffect } from 'react'

    function App() {
    const horaAtual = new Date()

    const [hora, setHora] = useState(horaAtual.getHours())
    const [minutos, setMinutos] = useState(horaAtual.getMinutes())
    const [segundos, setSegundos] = useState(horaAtual.getSeconds())

    useEffect(() => {
        const interval = setInterval(() => {
        setSegundos(segundos + 1)
        if (segundos == 59) {
            setSegundos(0)
            setMinutos(minutos + 1)
        }

        if(minutos == 59 && segundos == 59) {
            setMinutos(0)
            setHora(hora + 1)
        }
        
        if (hora == 23 && minutos == 59 && segundos == 59) {
            setHora(0)
            setMinutos(0)
            setSegundos(0)
        }
        }, 1000)

        return () => clearInterval(interval) //Para ele limpar e ser chamado de novo, para seguir seu fluxo
    })

    return(
        <div>
        <h2>{hora}:{minutos}:{segundos}</h2>
        </div>
    )
    }

    export default App;
    
Requisições para APIs usando axios(similar ao ajax): npm install axios

    import './App.css';
    import React, { useState, useEffect } from 'react'
    import axios from 'axios'

    function App() {

    const [nomes, setNomes] = useState([])

    useEffect(() => {
        axios.get('https://jsonplaceholder.typicode.com/users')
        .then(res => setNomes(res.data))
    }, [])

    return(
        <div>
        {nomes.map((res, index) => {
            console.log(res)
            return(
            <div>
                <h2 key={index}>{res.name} | {res.email}</h2>
            </div>
            )
        })}
        </div>
    )

    }

    export default App;

Recuperando valor de formulário:

    import React, { useState, useEffect } from 'react'

    function Api() {
        const [cidade, setCidade] = useState('')

        return (
            <div>
                <form onSubmit={e => e.preventDefault()}>
                    <input id="i" type="text" onChange={e => setCidade(e.target.value)}/>
                    <input type="submit" value="enviar" />
                </form> 
            </div>
        )
    } 

    export default Api

Forma 02: let currentValue = document.querySelector('input[name=searchInput]').value

Usando o useState para renderizar html: 

    setCidade(`
        <div>
            <p>${main.temp}</p>
            <p>${sys.country}</p>
            <p>${name}</p>
            <p>${description}</p>
            <img src="${url}" />
        </div>
    `)  

No return: 

    <div dangerouslySetInnerHTML={{__html: cidade}}/>

Componente de previsão do tempo:

    import React, { useState } from 'react'

    function Search(props) {
        const [cidade, setCidade] = useState('')

        function searchInput(e) {
            e.preventDefault()
            let currentValue = document.querySelector('input[name=searchInput]').value

            const apiKey = ''
            fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${currentValue}&limit=1&appid=${apiKey}`)
                .then(response => response.json())
                .then(result => {
                    const { lat, lon } = result[0]

                    console.log({lat, lon})

                    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`)
                        .then(response => response.json())
                        .then(res => {
                            const { main, name, sys, weather } = res
                            const { description, icon } = weather[0]

                            //src da imagem
                            const url = `https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/${icon}.svg`
                            
                            //Converter a temperatura de Kelvin para Celsius
                            const kelvin = main.temp
                            const celsius = kelvin - 273

                            //Mostrando as informações
                            setCidade(`
                                <div class="containerCidade">
                                    <p>Tamperatura: ${celsius.toFixed(2)} C°</p>
                                    <p>Pais: ${sys.country}</p>
                                    <p>Cidade: ${name}</p>
                                    <p>Descrição: ${description}</p>
                                    <img src="${url}" />
                                </div>
                            `) 
                        
                            const obj = {main, name, sys, description, icon, url}
                            console.log(obj)
                        })
                        .catch(e => {
                            console.log('Valores não encontrados | ' + e.message)
                            setCidade('')
                        })
                })
                .catch(e => {
                    console.log('A cidade não foi encontrada | ' + e.message)
                    setCidade('')
                })      
        }

        return(
            <div className="searchWraper">
                <div className="search">
                    <h2>Digite a cidade que você quer saber a previsão...</h2>
                    <form onSubmit={e => searchInput(e)}>
                        <input type="text" name="searchInput" placeholder={props.placeholder} />
                        <input type="submit" name="acao" value="Pesquisar" />
                    </form>
                </div>
                {
                    (cidade !== '')?
                    <div dangerouslySetInnerHTML={{__html: cidade}}/>:
                    <div style={{padding: '8px'}}>Pesquise por algo acima...</div>
                }
            </div>
        )

    }

    export default Search

Deploy no firebase:

    1 -  Criaremos um novo projeto no site do firebase
    2 -  Vamos em Criação / hosting
    3 -  No terminal, instalamos o firebase: npm install -g firebase-tools
    4 -  Chamamos o firebase login no console: firebase login
    5 -  Direcionamos para a pasta build e damos o comando: firebase init
    6 -  Escolhemos a opção hosting e damos espaço e entre
    7 -  Usaremos um projeto existente e selecionaremos ele
    8 -  What do you want to use as your public directory? build
    9 -  single-page-app
    10 - File build/index.html alredy exists. Overwrite? No

11 - Build de uma aplicação react:

comando: npm run build //Irá criar uma pasta chamada build, e os arquivos dela, colocamos no servidor

No index.html, do build, antes de toda a palavra static, colocamos /build. ex: /build/static/js/main.cf76ea9e.js

    12 - firebase deploy